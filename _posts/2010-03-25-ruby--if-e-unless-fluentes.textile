---
layout: post
title: "Ruby: if e unless fluentes"
---

h1. {{ page.title }}

p(meta). 25 Março 2010 - Niterói/RJ

Aproveitando uma mensagem do <a href="http://twitter.com/rafaelss/status/11056573672">@rafaelss</a> no Twitter sobre o <b>unless</b> em Ruby, tomei ânimo pra escrever sobre <b>if</b> e <b>unless</b>, coisa que eu já estava pensando faz algum tempo.<br /><br />Eu gosto do <b>unless</b>! Foi uma das primeiras coisas que me chamou a atenção no Ruby. Vi que a linguagem tenta ser fluente no que está fazendo e vejo no <b>unless</b> uma ajuda boa nesse sentido. Entretando, como em todo bom código, é necessário ter algum "modo de pensar fluente" no uso do <b>if</b> e do <b>unless</b>.<br /><br /><pre class="textmate-source"><span class="source source_ruby source_ruby_rails"><span class="keyword keyword_other keyword_other_special-method keyword_other_special-method_ruby">raise</span> <span class="support support_class support_class_ruby">ActiveRecord</span><span class="punctuation punctuation_separator punctuation_separator_other punctuation_separator_other_ruby">::</span><span class="variable variable_other variable_other_constant variable_other_constant_ruby">Rollback</span> <span class="keyword keyword_control keyword_control_ruby">unless</span> payment<span class="punctuation punctuation_separator punctuation_separator_method punctuation_separator_method_ruby">.</span>complete?</span><br /></pre><br />O código acima me parece muito mais fluente que:<br /><br /><pre class="textmate-source"><span class="source source_ruby source_ruby_rails"><span class="keyword keyword_other keyword_other_special-method keyword_other_special-method_ruby">raise</span> <span class="support support_class support_class_ruby">ActiveRecord</span><span class="punctuation punctuation_separator punctuation_separator_other punctuation_separator_other_ruby">::</span><span class="variable variable_other variable_other_constant variable_other_constant_ruby">Rollback</span> <span class="keyword keyword_control keyword_control_ruby">if</span> <span class="keyword keyword_operator keyword_operator_logical keyword_operator_logical_ruby">!</span>payment<span class="punctuation punctuation_separator punctuation_separator_method punctuation_separator_method_ruby">.</span>complete?</span></pre><br />Assim como:<br /><br /><pre class="textmate-source"><span class="source source_ruby source_ruby_rails"><span class="keyword keyword_control keyword_control_ruby">unless</span> credit<span class="punctuation punctuation_separator punctuation_separator_method punctuation_separator_method_ruby">.</span>save<br />  <span class="keyword keyword_other keyword_other_special-method keyword_other_special-method_ruby">raise</span> <span class="support support_class support_class_ruby">ActiveRecord</span><span class="punctuation punctuation_separator punctuation_separator_other punctuation_separator_other_ruby">::</span><span class="variable variable_other variable_other_constant variable_other_constant_ruby">Rollback</span><br /><span class="keyword keyword_control keyword_control_ruby">end</span><br /></span></pre><br />É mais legal que:<br /><br /><pre class="textmate-source"><span class="source source_ruby source_ruby_rails"><span class="keyword keyword_control keyword_control_ruby">if</span> <span class="keyword keyword_operator keyword_operator_logical keyword_operator_logical_ruby">!</span>credit<span class="punctuation punctuation_separator punctuation_separator_method punctuation_separator_method_ruby">.</span>save<br />  <span class="keyword keyword_other keyword_other_special-method keyword_other_special-method_ruby">raise</span> <span class="support support_class support_class_ruby">ActiveRecord</span><span class="punctuation punctuation_separator punctuation_separator_other punctuation_separator_other_ruby">::</span><span class="variable variable_other variable_other_constant variable_other_constant_ruby">Rollback</span><br /><span class="keyword keyword_control keyword_control_ruby">end</span><br /></span></pre><br />Porém eu não gosto de usar <b>else</b> com <b>unless</b>.<br /><br /><pre class="textmate-source"><span class="source source_ruby source_ruby_rails"><span class="keyword keyword_control keyword_control_ruby">unless</span> credit<span class="punctuation punctuation_separator punctuation_separator_method punctuation_separator_method_ruby">.</span>save<br /><span class="comment comment_line comment_line_number-sign comment_line_number-sign_ruby">  <span class="punctuation punctuation_definition punctuation_definition_comment punctuation_definition_comment_ruby">#</span> error fix code<br /></span><span class="keyword keyword_control keyword_control_ruby">else</span><br /><span class="comment comment_line comment_line_number-sign comment_line_number-sign_ruby">  <span class="punctuation punctuation_definition punctuation_definition_comment punctuation_definition_comment_ruby">#</span> ok code<br /></span><span class="keyword keyword_control keyword_control_ruby">end</span><br /></span></pre><br />Parece esquisito, quebrado, remendado. Pra usar o <b>else</b> é melhor usar <b>if</b>:<br /><br /><pre class="textmate-source"><span class="source source_ruby source_ruby_rails"><span class="keyword keyword_control keyword_control_ruby">if</span> credit<span class="punctuation punctuation_separator punctuation_separator_method punctuation_separator_method_ruby">.</span>save<br /><span class="comment comment_line comment_line_number-sign comment_line_number-sign_ruby">  <span class="punctuation punctuation_definition punctuation_definition_comment punctuation_definition_comment_ruby">#</span> ok code<br /></span><span class="keyword keyword_control keyword_control_ruby">else</span><br /><span class="comment comment_line comment_line_number-sign comment_line_number-sign_ruby">  <span class="punctuation punctuation_definition punctuation_definition_comment punctuation_definition_comment_ruby">#</span> error fix code<br /></span><span class="keyword keyword_control keyword_control_ruby">end</span><br /></span></pre><br />Mas repare bem que eu inverti a ordem do teste. Não é agradável ler algo como: Se não acontece alguma coisa senão acontece outra. Soa mal! Um exemplo mais real: Se não chover eu vou caminhar, senão eu vou ao cinema. Algo mais natural: Se chover eu vou ao cinema, senão vou caminhar. Podem achar frescura, mas passar 8 horas por dia lendo "se não... senão..." pode fazer alguém entrar numa escola com uma <a href="http://pt.wikipedia.org/wiki/Uzi">submetralhadora Uzi</a> e matar todos os seus coleguinhas!<br /><br />Então, repetindo, caros leitores. Não é legal:<br /><br /><pre class="textmate-source"><span class="source source_ruby source_ruby_rails"><span class="keyword keyword_control keyword_control_ruby">if</span> <span class="keyword keyword_operator keyword_operator_logical keyword_operator_logical_ruby">!</span>credit<span class="punctuation punctuation_separator punctuation_separator_method punctuation_separator_method_ruby">.</span>save<br /><span class="comment comment_line comment_line_number-sign comment_line_number-sign_ruby">  <span class="punctuation punctuation_definition punctuation_definition_comment punctuation_definition_comment_ruby">#</span> error fix code<br /></span><span class="keyword keyword_control keyword_control_ruby">else</span><br /><span class="comment comment_line comment_line_number-sign comment_line_number-sign_ruby">  <span class="punctuation punctuation_definition punctuation_definition_comment punctuation_definition_comment_ruby">#</span> ok code<br /></span><span class="keyword keyword_control keyword_control_ruby">end</span><br /></span></pre><br />Prefiram:<br /><br /><pre class="textmate-source"><span class="source source_ruby source_ruby_rails"><span class="keyword keyword_control keyword_control_ruby">if</span> credit<span class="punctuation punctuation_separator punctuation_separator_method punctuation_separator_method_ruby">.</span>save<br /><span class="comment comment_line comment_line_number-sign comment_line_number-sign_ruby">  <span class="punctuation punctuation_definition punctuation_definition_comment punctuation_definition_comment_ruby">#</span> ok code<br /></span><span class="keyword keyword_control keyword_control_ruby">else</span><br /><span class="comment comment_line comment_line_number-sign comment_line_number-sign_ruby">  <span class="punctuation punctuation_definition punctuation_definition_comment punctuation_definition_comment_ruby">#</span> error fix code<br /></span><span class="keyword keyword_control keyword_control_ruby">end</span><br /></span></pre><br />Outra coisa é testar se um valor é <b>nil</b>:<br /><br /><pre class="textmate-source"><span class="source source_ruby source_ruby_rails"><span class="keyword keyword_control keyword_control_ruby">unless</span> value<span class="punctuation punctuation_separator punctuation_separator_method punctuation_separator_method_ruby">.</span>nil?<br /><span class="comment comment_line comment_line_number-sign comment_line_number-sign_ruby">  <span class="punctuation punctuation_definition punctuation_definition_comment punctuation_definition_comment_ruby">#</span> do something<br /></span><span class="keyword keyword_control keyword_control_ruby">end</span><br /></span></pre><br />É mais agradável:<br /><br /><pre class="textmate-source"><span class="source source_ruby source_ruby_rails"><span class="keyword keyword_control keyword_control_ruby">if</span> value<br /><span class="comment comment_line comment_line_number-sign comment_line_number-sign_ruby">  <span class="punctuation punctuation_definition punctuation_definition_comment punctuation_definition_comment_ruby">#</span> do something<br /></span><span class="keyword keyword_control keyword_control_ruby">end</span><br /></span></pre><br />Tem o mesmo efeito, mas contribui para um mundo melhor.<br /><br />Quando temos múltiplas condições o unless também parece confuso:<br /><br /><pre class="textmate-source"><span class="source source_ruby source_ruby_rails"><span class="keyword keyword_control keyword_control_ruby">unless</span> <span class="keyword keyword_operator keyword_operator_logical keyword_operator_logical_ruby">!</span>valid? <span class="keyword keyword_operator keyword_operator_logical keyword_operator_logical_ruby">and</span> <span class="keyword keyword_operator keyword_operator_logical keyword_operator_logical_ruby">!</span>beautiful?<br /><span class="comment comment_line comment_line_number-sign comment_line_number-sign_ruby">  <span class="punctuation punctuation_definition punctuation_definition_comment punctuation_definition_comment_ruby">#</span> do good thing<br /></span><span class="keyword keyword_control keyword_control_ruby">end</span><br /></span></pre><br />Algo melhor:<br /><br /><pre class="textmate-source"><span class="source source_ruby source_ruby_rails"><span class="keyword keyword_control keyword_control_ruby">if</span> valid? <span class="keyword keyword_operator keyword_operator_logical keyword_operator_logical_ruby">and</span> beautiful?<br /><span class="comment comment_line comment_line_number-sign comment_line_number-sign_ruby">  <span class="punctuation punctuation_definition punctuation_definition_comment punctuation_definition_comment_ruby">#</span> do good thing<br /></span><span class="keyword keyword_control keyword_control_ruby">end</span><br /></span></pre><br />Estruturas condicionais bem escritas deveriam aumentar o salário de um programador. Isso contribui pro fácil entendimento da mensagem que será executada. Pra um processador não faz a menor diferença - ou se fizer será mínima.<br /><br />Claro que o que parece bom pra uma pessoa pode não ser pra outra. Podem existir até discordâncias quanto ao que é mais fluente ou não. Mas existem certas coisas que confundem qualquer um numa primeira leitura. Isso sim deve ser evitado.<div class="blogger-post-footer"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/1372066769163881306-7625322090434026913?l=rafael.xlii.com.br' alt='' /></div>