---
layout: post
title: "Ruby: %w(and or not && || !)"
---

h1. {{ page.title }}

p(meta). 23 Março 2010 - Niterói/RJ

Um pouco sobre esses operadores booleanos em Ruby.<br /><br />"E"<br /><br />Ambos os operadores, "and" e "&&", avaliam como verdadeira a expressão onde os dois operandos são verdadeiros. O segundo operando só é avaliado caso o primeiro seja verdadeiro. Isso é conhecido como <i><a href="http://en.wikipedia.org/wiki/Short-circuit_evaluation">minimal evaluation ou short-circuit evaluation</a></i>. A única diferença entre as duas formas é a precedência: "&&" tem precedência em relação a "and".<br /><br />"Ou"<br /><br />Analogamente os operadores "or" e "| |" avaliam a expressão como verdadeira na qual um dos operandos é verdadeiro.  O segundo operando é avaliado somente no caso do primeiro ser falso. A única diferença entre eles está na precedência: "| |" tem precedência em relação a "or".<br /><br />Por falar nisso, "and" e "or" tem a mesma precedência, entretanto "&&" tem uma precedência em relação a "| |".<br /><br />"Não"<br /><br />"not" e "!" retornam o valor oposto do seu operando. A única diferença também é a precedência, pois "!" tem precedência em relação a "not".<br /><br /><br />Referência:<br /><a href="http://ruby-doc.org/docs/ProgrammingRuby/">Programming Ruby - The Pragmatic Programmer's Guide</a><div class="blogger-post-footer"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/1372066769163881306-4807351656973845594?l=rafael.xlii.com.br' alt='' /></div>